# This workflow enables manual deployments to different client environments.
# To add a new client (e.g., 'newclient'), you need to:
# 1. Add 'newclient' to the 'options' list under 'inputs.client'.
# 2. Create the following secrets in your GitHub repository settings:
#    - FIREBASE_SERVICE_ACCOUNT_NEWCLIENT
#    - GEMINI_API_KEY_NEWCLIENT
#    - FIREBASE_CONFIG_NEWCLIENT

name: Manual Deploy to Client

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Client to deploy to'
        required: true
        type: choice
        options:
          - default
          - hitotoiro
          - ishibashihome
          # Add new client names here

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Set client environment variables
        run: |
          CLIENT="${{ github.event.inputs.client }}"
          CLIENT_UPPER=$(echo "$CLIENT" | tr 'a-z' 'A-Z')
          echo "Selected client: $CLIENT"
          echo "CLIENT_NAME=$CLIENT" >> $GITHUB_ENV
          echo "CLIENT_UPPER=$CLIENT_UPPER" >> $GITHUB_ENV

          echo "Using client: $CLIENT (uppercase: $CLIENT_UPPER)"

      - name: Parse Firebase Config and Create .env
        run: |
          CLIENT_UPPER="${{ env.CLIENT_UPPER }}"

          # Get Firebase config from secrets dynamically
          if [ "$CLIENT_UPPER" = "DEFAULT" ]; then
            CONFIG_JSON='${{ secrets.FIREBASE_CONFIG_DEFAULT }}'
          elif [ "$CLIENT_UPPER" = "HITOTOIRO" ]; then
            CONFIG_JSON='${{ secrets.FIREBASE_CONFIG_HITOTOIRO }}'
          elif [ "$CLIENT_UPPER" = "ISHIBASHIHOME" ]; then
            CONFIG_JSON='${{ secrets.FIREBASE_CONFIG_ISHIBASHIHOME }}'
          else
            echo "ERROR: Unknown client ${{ github.event.inputs.client }}. Please add configuration for this client." >&2
            exit 1
          fi

          if [ -z "$CONFIG_JSON" ] || [ "$CONFIG_JSON" = "null" ]; then
            echo "ERROR: Firebase config secret not found for client: ${{ github.event.inputs.client }}" >&2
            echo "Expected secret name: FIREBASE_CONFIG_$CLIENT_UPPER" >&2
            exit 1
          fi

          # Parse Firebase config
          FIREBASE_API_KEY=$(echo $CONFIG_JSON | jq -r .apiKey)
          FIREBASE_AUTH_DOMAIN=$(echo $CONFIG_JSON | jq -r .authDomain)
          FIREBASE_PROJECT_ID=$(echo $CONFIG_JSON | jq -r .projectId)
          FIREBASE_STORAGE_BUCKET=$(echo $CONFIG_JSON | jq -r .storageBucket)
          FIREBASE_MESSAGING_SENDER_ID=$(echo $CONFIG_JSON | jq -r .messagingSenderId)
          FIREBASE_APP_ID=$(echo $CONFIG_JSON | jq -r .appId)

          # Create .env file for Vite build
          echo "VITE_FIREBASE_API_KEY=${FIREBASE_API_KEY}" > .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN}" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${FIREBASE_MESSAGING_SENDER_ID}" >> .env
          echo "VITE_FIREBASE_APP_ID=${FIREBASE_APP_ID}" >> .env

          echo "Created .env file with Firebase configuration for build"

          # Also set for deployment
          echo "FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID" >> $GITHUB_ENV

          echo "Parsed Firebase environment variables successfully for client: ${{ github.event.inputs.client }}"

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Debug environment variables
        run: |
          echo "=== Environment Variables Debug for ${{ github.event.inputs.client }} ==="
          echo "FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}"
          echo "VITE_FIREBASE_PROJECT_ID: ${{ env.VITE_FIREBASE_PROJECT_ID }}"
          echo "CLIENT: ${{ github.event.inputs.client }}"

      - name: Create dynamic .firebaserc for deployment
        run: |
          PROJECT_ID="${{ env.FIREBASE_PROJECT_ID }}"
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "ERROR: FIREBASE_PROJECT_ID is empty for client ${{ github.event.inputs.client }}!"
            exit 1
          fi

          cat > .firebaserc << EOF
          {
            "projects": {
              "default": "$PROJECT_ID"
            }
          }
          EOF
          echo "Generated .firebaserc with project: $PROJECT_ID for client: ${{ github.event.inputs.client }}"
          cat .firebaserc

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: ${{ secrets[format('FIREBASE_SERVICE_ACCOUNT_{0}', env.CLIENT_UPPER)] }}
          channelId: live
          projectId: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Deployment Success Notification
        run: |
          echo "🎉 Successfully deployed to ${{ github.event.inputs.client }} environment!"
          echo "Project ID: ${{ env.FIREBASE_PROJECT_ID }}"